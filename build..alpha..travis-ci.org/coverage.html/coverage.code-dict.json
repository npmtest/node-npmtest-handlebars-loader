{"/home/travis/build/npmtest/node-npmtest-handlebars-loader/test.js":"/* istanbul instrument in package npmtest_handlebars_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-handlebars-loader/lib.npmtest_handlebars_loader.js":"/* istanbul instrument in package npmtest_handlebars_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_handlebars_loader = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_handlebars_loader = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-handlebars-loader/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-handlebars-loader && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_handlebars_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_handlebars_loader\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_handlebars_loader.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_handlebars_loader.rollup.js'] =\n            local.assetsDict['/assets.npmtest_handlebars_loader.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_handlebars_loader.__dirname + '/lib.npmtest_handlebars_loader.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-handlebars-loader/node_modules/handlebars-loader/index.js":"var loaderUtils = require(\"loader-utils\");\nvar handlebars = require(\"handlebars\");\nvar async = require(\"async\");\nvar util = require(\"util\");\nvar path = require(\"path\");\nvar assign = require(\"object-assign\");\nvar fastreplace = require('./lib/fastreplace');\nvar findNestedRequires = require('./lib/findNestedRequires');\n\nfunction versionCheck(hbCompiler, hbRuntime) {\n  return hbCompiler.COMPILER_REVISION === (hbRuntime[\"default\"] || hbRuntime).COMPILER_REVISION;\n}\n\n/**\n * Check the loader query and webpack config for loader options. If an option is defined in both places,\n * the loader query takes precedence.\n *\n * @param {Loader} loaderContext\n * @returns {Object}\n */\nfunction getLoaderConfig(loaderContext) {\n  var query = loaderUtils.getOptions(loaderContext) || {};\n  var configKey = query.config || 'handlebarsLoader';\n  var config = loaderContext.options[configKey] || {};\n  delete query.config;\n  return assign({}, config, query);\n}\n\nmodule.exports = function(source) {\n  if (this.cacheable) this.cacheable();\n  var loaderApi = this;\n  var query = getLoaderConfig(loaderApi);\n  var runtimePath = query.runtime || require.resolve(\"handlebars/runtime\");\n\n  if (!versionCheck(handlebars, require(runtimePath))) {\n    throw new Error('Handlebars compiler version does not match runtime version');\n  }\n\n  // Possible extensions for partials\n  var extensions = query.extensions;\n  if (!extensions) {\n    extensions = [\".handlebars\", \".hbs\", \"\"];\n  }\n  else if (!Array.isArray(extensions)) {\n    extensions = extensions.split(/[ ,;]/g);\n  }\n\n  var rootRelative = query.rootRelative;\n  if (rootRelative == null) {\n    rootRelative = \"./\";\n  }\n\n  var foundPartials = {};\n  var foundHelpers = {};\n  var foundUnclearStuff = {};\n  var knownHelpers = {};\n\n  var queryKnownHelpers = query.knownHelpers;\n  if (queryKnownHelpers) {\n    [].concat(queryKnownHelpers).forEach(function(k) {\n      knownHelpers[k] = true;\n    });\n  }\n\n  var inlineRequires = query.inlineRequires;\n  if (inlineRequires) {\n    inlineRequires = new RegExp(inlineRequires);\n  }\n\n  var exclude = query.exclude;\n  if (exclude) {\n    exclude = new RegExp(exclude);\n  }\n\n  var debug = query.debug;\n\n  var hb = handlebars.create();\n  var JavaScriptCompiler = hb.JavaScriptCompiler;\n  function MyJavaScriptCompiler() {\n    JavaScriptCompiler.apply(this, arguments);\n  }\n  MyJavaScriptCompiler.prototype = Object.create(JavaScriptCompiler.prototype);\n  MyJavaScriptCompiler.prototype.compiler = MyJavaScriptCompiler;\n  MyJavaScriptCompiler.prototype.nameLookup = function(parent, name, type) {\n    if (debug) {\n      console.log(\"nameLookup %s %s %s\", parent, name, type);\n    }\n    if (type === \"partial\") {\n      if (name === '@partial-block') {\n        // this is a built in partial, no need to require it\n        return JavaScriptCompiler.prototype.nameLookup.apply(this, arguments);\n      }\n      if (foundPartials[\"$\" + name]) {\n        return \"require(\" + JSON.stringify(foundPartials[\"$\" + name]) + \")\";\n      }\n      foundPartials[\"$\" + name] = null;\n      return JavaScriptCompiler.prototype.nameLookup.apply(this, arguments);\n    }\n    else if (type === \"helper\") {\n      if (foundHelpers[\"$\" + name]) {\n        return \"__default(require(\" + JSON.stringify(foundHelpers[\"$\" + name]) + \"))\";\n      }\n      foundHelpers[\"$\" + name] = null;\n      return JavaScriptCompiler.prototype.nameLookup.apply(this, arguments);\n    }\n    else if (type === \"context\") {\n      // This could be a helper too, save it to check it later\n      if (!foundUnclearStuff[\"$\" + name]) foundUnclearStuff[\"$\" + name] = false;\n      return JavaScriptCompiler.prototype.nameLookup.apply(this, arguments);\n    }\n    else {\n      return JavaScriptCompiler.prototype.nameLookup.apply(this, arguments);\n    }\n  };\n\n  if (inlineRequires) {\n    MyJavaScriptCompiler.prototype.pushString = function(value) {\n      if (inlineRequires.test(value)) {\n        this.pushLiteral(\"require(\" + JSON.stringify(value) + \")\");\n      } else {\n        JavaScriptCompiler.prototype.pushString.call(this, value);\n      }\n    };\n    MyJavaScriptCompiler.prototype.appendToBuffer = function (str) {\n      // This is a template (stringified HTML) chunk\n      if (str.indexOf && str.indexOf('\"') === 0) {\n        var replacements = findNestedRequires(str, inlineRequires);\n        str = fastreplace(str, replacements, function (match) {\n          return \"\\\" + require(\" + JSON.stringify(match) + \") + \\\"\";\n        });\n      }\n      return JavaScriptCompiler.prototype.appendToBuffer.apply(this, arguments);\n    };\n  }\n\n  hb.JavaScriptCompiler = MyJavaScriptCompiler;\n\n  // This is an async loader\n  var loaderAsyncCallback = this.async();\n\n  var firstCompile = true;\n  var compilationPass = 0;\n\n  (function compile() {\n    if (debug) {\n      console.log(\"\\nCompilation pass %d\", ++compilationPass);\n    }\n\n    function referenceToRequest(ref, type) {\n      if (/^\\$/.test(ref)) {\n        return ref.substring(1);\n      }\n\n      // Use a relative path for helpers if helper directories are given\n      // unless automatic relative helper resolution has been turned off\n      if (type === 'helper' && query.helperDirs && query.helperDirs.length && rootRelative !== '') {\n        return './' + ref;\n      }\n\n      return rootRelative + ref;\n    }\n\n    // Need another compiler pass?\n    var needRecompile = false;\n\n    // Precompile template\n    var template = '';\n\n    try {\n      if (source) {\n        template = hb.precompile(source, {\n          knownHelpersOnly: firstCompile ? false : true,\n          knownHelpers: knownHelpers,\n          preventIndent: query.preventIndent,\n          compat: query.compat ? true : false\n        });\n      }\n    } catch (err) {\n      return loaderAsyncCallback(err);\n    }\n\n    var resolve = function(request, type, callback) {\n      var contexts = [loaderApi.context];\n\n      // Any additional helper dirs will be added to the searchable contexts\n      if (query.helperDirs) {\n        contexts = contexts.concat(query.helperDirs);\n      }\n\n      // Any additional partial dirs will be added to the searchable contexts\n      if (query.partialDirs) {\n        contexts = contexts.concat(query.partialDirs);\n      }\n\n      var resolveWithContexts = function() {\n        var context = contexts.shift();\n\n        var traceMsg;\n        if (debug) {\n          traceMsg = path.normalize(path.join(context, request));\n          console.log(\"Attempting to resolve %s %s\", type, traceMsg);\n          console.log(\"request=%s\", request);\n        }\n\n        var next = function(err) {\n          if (contexts.length > 0) {\n            resolveWithContexts();\n          }\n          else {\n            if (debug) console.log(\"Failed to resolve %s %s\", type, traceMsg);\n            return callback(err);\n          }\n        };\n\n        loaderApi.resolve(context, request, function(err, result) {\n          if (!err && result) {\n            if (exclude && exclude.test(result)) {\n              if (debug) console.log(\"Excluding %s %s\", type, traceMsg);\n              return next();\n            }\n            else {\n              if (debug) console.log(\"Resolved %s %s\", type, traceMsg);\n              return callback(err, result);\n            }\n          }\n          else {\n            return next(err);\n          }\n        });\n      };\n\n      resolveWithContexts();\n    };\n\n    var resolveUnclearStuffIterator = function(stuff, unclearStuffCallback) {\n      if (foundUnclearStuff[stuff]) return unclearStuffCallback();\n      var request = referenceToRequest(stuff.substr(1), 'unclearStuff');\n      resolve(request, 'unclearStuff', function(err, result) {\n        if (!err && result) {\n          knownHelpers[stuff.substr(1)] = true;\n          foundHelpers[stuff] = result;\n          needRecompile = true;\n        }\n        foundUnclearStuff[stuff] = true;\n        unclearStuffCallback();\n      });\n    };\n\n    var defaultPartialResolver = function defaultPartialResolver(request, callback){\n      request = referenceToRequest(request, 'partial');\n      // Try every extension for partials\n      var i = 0;\n      (function tryExtension() {\n        if (i >= extensions.length) {\n          var errorMsg = util.format(\"Partial '%s' not found\", request);\n          return callback(new Error(errorMsg));\n        }\n        var extension = extensions[i++];\n\n        resolve(request + extension, 'partial', function(err, result) {\n          if (!err && result) {\n            return callback(null, result);\n          }\n          tryExtension();\n        });\n      }());\n    };\n\n    var resolvePartialsIterator = function(partial, partialCallback) {\n      if (foundPartials[partial]) return partialCallback();\n      // Strip the # off of the partial name\n      var request = partial.substr(1);\n\n      var partialResolver = query.partialResolver || defaultPartialResolver;\n\n      if(query.ignorePartials) {\n        return partialCallback();\n      } else {\n        partialResolver(request, function(err, resolved){\n          if(err) {\n            return partialCallback(err);\n          }\n          foundPartials[partial] = resolved;\n          needRecompile = true;\n          return partialCallback();\n        });\n      }\n    };\n\n    var resolveHelpersIterator = function(helper, helperCallback) {\n      if (foundHelpers[helper]) return helperCallback();\n      var request = referenceToRequest(helper.substr(1), 'helper');\n\n      var defaultHelperResolver = function(request, callback){\n        return resolve(request, 'helper', callback);\n      };\n\n      var helperResolver = query.helperResolver || defaultHelperResolver;\n\n      helperResolver(request, function(err, result) {\n        if (!err && result) {\n          knownHelpers[helper.substr(1)] = true;\n          foundHelpers[helper] = result;\n          needRecompile = true;\n          return helperCallback();\n        }\n\n        // We don't return an error: we just fail to resolve the helper.\n        // This is b/c Handlebars calls nameLookup with type=helper for non-helper\n        // template options, e.g. something that comes from the template data.\n        helperCallback();\n      });\n    };\n\n    var doneResolving = function(err) {\n      if (err) return loaderAsyncCallback(err);\n\n      // Do another compiler pass if not everything was resolved\n      if (needRecompile) {\n        firstCompile = false;\n        return compile();\n      }\n\n      // export as module if template is not blank\n      var slug = template ?\n        'var Handlebars = require(' + JSON.stringify(runtimePath) + ');\\n'\n        + 'function __default(obj) { return obj && (obj.__esModule ? obj[\"default\"] : obj); }\\n'\n        + 'module.exports = (Handlebars[\"default\"] || Handlebars).template(' + template + ');' :\n        'module.exports = function(){return \"\";};';\n\n      loaderAsyncCallback(null, slug);\n    };\n\n    var resolveItems = function(err, type, items, iterator, callback) {\n      if (err) return callback(err);\n\n      var itemKeys = Object.keys(items);\n\n      if (debug) {\n        console.log(\"Attempting to resolve \", type, \":\", itemKeys);\n      }\n\n      // Resolve path for each item\n      async.each(itemKeys, iterator, callback);\n    };\n\n    var resolvePartials = function(err) {\n      resolveItems(err, 'partials', foundPartials, resolvePartialsIterator, doneResolving);\n    };\n\n    var resolveUnclearStuff = function(err) {\n      resolveItems(err, 'unclearStuff', foundUnclearStuff, resolveUnclearStuffIterator, resolvePartials);\n    };\n\n    var resolveHelpers = function(err) {\n      resolveItems(err, 'helpers', foundHelpers, resolveHelpersIterator, resolveUnclearStuff);\n    };\n\n    resolveHelpers();\n  }());\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-loader/node_modules/handlebars-loader/lib/fastreplace.js":"var placeholderRegex = /xxxxREPLACExxxx[0-9\\.]+xxxx/g;\n\nfunction getPlaceholder() {\n  return 'xxxxREPLACExxxx' + Math.random() + 'xxxx';\n}\n\nfunction replaceWithPlaceholders(str, replacements) {\n  var content = [str];\n  var placeholderMap = {};\n\n  for (var i = replacements.length - 1, repl; repl = replacements[i--];) {\n    do {\n      var placeholder = getPlaceholder();\n    } while(placeholderMap[placeholder]);\n    placeholderMap[placeholder] = repl.value;\n\n    var x = content.pop();\n    content.push(x.substr(repl.start + repl.length));\n    content.push(placeholder);\n    content.push(x.substr(0, repl.start));\n  }\n  content.reverse();\n\n  return {\n    content: content.join(\"\"),\n    placeholderMap: placeholderMap\n  };\n}\n\nmodule.exports = function (str, replacements, replaceFn) {\n  var withPlaceholders = replaceWithPlaceholders(str, replacements);\n  var placeholderMap = withPlaceholders.placeholderMap;\n\n  placeholderRegex.lastIndex = 0;\n  return withPlaceholders.content.replace(placeholderRegex, function(match) {\n    var origValue = placeholderMap[match];\n    if (!origValue) return match;\n    return replaceFn(origValue);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-handlebars-loader/node_modules/handlebars-loader/lib/findNestedRequires.js":"var fastparse = require(\"fastparse\");\n\nvar findNestedRequires = function(match, strUntilValue, name, value, index) {\n  if(!this.requiresPattern.test(value)) return;\n  this.results.push({\n    start: index + strUntilValue.length,\n    length: value.length,\n    value: value\n  });\n};\n\nvar parser = new fastparse({\n  outside: {\n    \"<!--.*?-->\": true, // html comments\n    \"<![CDATA[.*?]]>\": true, // cdata\n    \"<[!\\\\?].*?>\": true, // scripting tags\n    \"<\\/[^>]+>\": true, // closing tag\n    \"<([a-zA-Z\\\\-:]+)\\\\s*\": \"inside\" // opening tag\n  },\n  inside: {\n    \"((\\\\n|r|t)|\\\\s)+\": true, // eat up whitespace (including escaped)\n    \">\": \"outside\", // end of attributes\n    \"(([a-zA-Z\\\\-]+)\\\\s*=\\\\s*\\\\\\\\\\\")([^\\\"]*)\\\\\\\\\\\"\": findNestedRequires, // quoted attributes\n    \"(([a-zA-Z\\\\-]+)\\\\s*=\\\\s*)([^\\\\s>]+)\": findNestedRequires // non-quoted attributes\n  }\n});\n\nmodule.exports = function(str, requiresPattern) {\n  return parser.parse(\"outside\", str, {\n    requiresPattern: requiresPattern,\n    results: []\n  }).results;\n};\n"}